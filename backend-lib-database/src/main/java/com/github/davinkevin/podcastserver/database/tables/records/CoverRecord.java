/*
 * This file is generated by jOOQ.
 */
package com.github.davinkevin.podcastserver.database.tables.records;


import com.github.davinkevin.podcastserver.database.tables.Cover;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoverRecord extends UpdatableRecordImpl<CoverRecord> implements Record4<UUID, Integer, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.cover.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.cover.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.cover.height</code>.
     */
    public void setHeight(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.cover.height</code>.
     */
    public Integer getHeight() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.cover.url</code>.
     */
    public void setUrl(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.cover.url</code>.
     */
    public String getUrl() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.cover.width</code>.
     */
    public void setWidth(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.cover.width</code>.
     */
    public Integer getWidth() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, Integer, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, Integer, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Cover.COVER.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Cover.COVER.HEIGHT;
    }

    @Override
    public Field<String> field3() {
        return Cover.COVER.URL;
    }

    @Override
    public Field<Integer> field4() {
        return Cover.COVER.WIDTH;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getHeight();
    }

    @Override
    public String component3() {
        return getUrl();
    }

    @Override
    public Integer component4() {
        return getWidth();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getHeight();
    }

    @Override
    public String value3() {
        return getUrl();
    }

    @Override
    public Integer value4() {
        return getWidth();
    }

    @Override
    public CoverRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public CoverRecord value2(Integer value) {
        setHeight(value);
        return this;
    }

    @Override
    public CoverRecord value3(String value) {
        setUrl(value);
        return this;
    }

    @Override
    public CoverRecord value4(Integer value) {
        setWidth(value);
        return this;
    }

    @Override
    public CoverRecord values(UUID value1, Integer value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoverRecord
     */
    public CoverRecord() {
        super(Cover.COVER);
    }

    /**
     * Create a detached, initialised CoverRecord
     */
    public CoverRecord(UUID id, Integer height, String url, Integer width) {
        super(Cover.COVER);

        setId(id);
        setHeight(height);
        setUrl(url);
        setWidth(width);
        resetChangedOnNotNull();
    }
}
